title: "Applications, systems, libraries: which are you writing?"
draft: true
date: "2023/02/17"
body: |
  A lot of coding 'rules' - should structs should be aligned - and arguments about languages - is Python 'too slow' - miss an important piece of context: is this about writing systems, applications or libraries? They're very different things.

  Applications are to do a specific thing for a group of users. Delighting these user by taking away drudgery, informing them, letting them buy stocks, etc, is the goal. Complexity is the hard part. The number of features grows, old behaviour is supported behind branches to avoid breaking backwards compatibility, and the different types of users (enterprise vs individual, free trial vs paid vs in arrears), and the configurability they're given, increase branching everywhere. For SaaS, it's also usual for it always to be the case that multiple experiments are in play at any one time, and that many 'temporary' feature-flags end up outliving the team that authored them.  Fighting against the tenancy of complexity to drag your velocity down to zero is the most important thing to consider when discussing tradeoffs, at least at all the SaaSs I've worked for (and looks to be true for desktop too).

  Systems solve problems a layer below the reason a user is engaging with software: a HTTP server serves up funny gifs, a database stores metadata on the gifs, a repository stores the source-code for the HTTP server, an operating system run on both the client and server. Here the work is well specified (often formally, e.g. RFCxxx), changes slowly (next version). But the hard part is that  the implementation must be totally correct and, generally, extremely fast.

  Libraries are reusable utilities forming part of apps or systems, not full programs themselves. Further, there are two important types of libraries that should split up:
  * general libraries: standard library or open-source code, e.g. Rust crates, Ruby gems.
  * application libraries: code to support a single application

  General and standard libraries should make as few assumptions as possible, to allow them to be reused. e.g. they shouldn't make decisions on things like logging so they can be embedded in any application, accepting some adapter for the apps' logging strategy. It's often a plus if they have few dependencies, as that again makes them easier to adopt (some language can't have multiple versions of one dep in play, so they fewer deps, the less likely your lib will end up conflicting with the app or another lib). General libraries need to be general, i.e. consider all edge-cases. Sometimes they also share the need of systems to be fast.

  Application libraries can, and probably should, accept far more coupling to the application's assumptions (e.g. make use of many other libraries). They can also solve just the subset of the problem the application needs. i.e. it's fine to not consider HTTP PATCH in some app library that never use it.

  ## Does the rule make sense for what you're doing?

  As an example, in Go we hear that types should have a useful zero value, i.e. an uninitialized value of a type shoudl be useful and safe. This works really well for some some built-in or standard-library types. For instance a nil slice can be appended to, and a nil mutex is unlocked:

  ```go
  var things []any
  // this is fine, no panic
  things = append(things, "hi")
  ```

  But how well does this work for application data-types? What's a useful zero `BankAccountClient`? Does it just return an error on all sends (is that more useful than failing loudly, e.g. panicking?), or does it block and perform service discovery? If you pass it a zero `CloseAccountRequest` I hope it doesn't close whatever account maps to the zero value of `AccountID`. How could you make your `Server` zero value useful? Recursively that'd generally mean we'd need a useful zero value for networking clients, database clients, and useful zero values for all configuration.

  Attempting to design and rely on useful zero values for application types sounds more like an experiment in emergent behaviour than good design. I imagine calling `server.Listen` and then awaiting the random requests firing off as the various useful zero-values interact.

  But I don't think the Go authors meant this advice to be applied to applications, I think it applies only to library code foremost, and the type of data-structures we see more in systems programming (concurrency). Applications generally want to encapsulate data-structure initialization to fight complexity (e.g. always mandate constructors), so generally you don't want to worry about having zero types of your application types, and at least you know you've hit a bug if you find one.

  ## Does the advice matter to you?


