title: When is a slice of any not a slice of any?
date: "2022/09/04"
draft: true
body: |
    When is `[]any` not `[]any`? When generics get involved!

    Will the following compile? If not, why?

    ```go
    package main

    func main() {
        one([]any{})
    }

    func one[S []E, E any](s S) {
        two(s)
    }

    func two(s []any) []any { return s }
    ```

    <details>
     <summary>See answer ðŸ‘€</summary><p>It doesn't compile, with this error:
     <code><pre>generics/main.go:9:13: cannot use s (variable of type S constrained by []E) as type []any in argument to two:
     cannot assign []E (in S) to []any
     </code></pre>
     </p>
    </details>

    It'd be quite reasonable to think it should compile, because:

    1. `one` has the type parameter `[S []E, E any]`
    2. by substitution, `S = []E`, `E = any`, so `S = []any`, surely?
    3. therefore we should be able to pass `S` into a function accepting `[]any`?

    <p>But we know from the error that this reasoning is missing something. But what? It's not
    tilde<sup><a href="#tilde">1</a></sup>.</p>

    Figuring out what's going on here is worth it. If you follow me through this post I'm certain you'll end up with
    an understanding of how generics and interfaces really work that's way deeper than the average Go developer's.

    ## Why did Go add generics?

    First up, let's remind ourselves why Go added generics. Without generics we couldn't write certain types of functions in
    a type-safe way, for example: "reverse a slice".

    > Quick note: `any` is ['an alias for `interface{}` and is equivalent in all ways'](https://github.com/golang/go/blob/master/src/builtin/builtin.go#L94). Though it landed alongside generics in Go 1.18, `any`
    is just `interface{}`.

    Pre-generics, to attempt to write a generic reverse we'd have to have written something that sacrificed compile-time type-safety in some way. Either writing a
    function accepting `[]any` for a little compile-time help (ensuring we're at least working with a slice), or
    just `any` (which would require reflection). I'll discuss just the first approach, `reverseOld`, here:

    ```go
    // technically it would have been []interface{} pre-Go 1.18
    func reverseOld(s []any) bool) []any { /* ... */ }
    ```

    with generics we can use type-parameters:

    ```go
    func reverseGeneric[S []E, E any](s S) bool) []E { /* ... */ }
    ```

    The `reverseGeneric` version is better for two reasons. First, the `reverseOld` approach loses type information: even
    when we pass in a slice with a non-any type like `[]io.Reader` we get back `[]any`:

    ```go
    readers := []io.Reader{}

    // won't compile - we get back []any
    var rev []io.Reader = reverseOld(readers)
    // works fine - we keep the type
    var revGen []io.Reader = reverseGeneric(readers)
    ```

    Secondly, the `reverseOld` function can't work with all slices, but `reverseGeneric` can. `reverseOld` can only accept
    slices whose element type is an interface type:

    ```go
    files := []*os.File{}
    readers := []io.ReadCloser{}

    // cannot use files (variable of type []*os.File) as type []any in argument to reverseOld
    _ = reverseOld(files)
    // works fine
    _ = reverseGeneric(files)
    _ = reverseGeneric(readers)
    ```

    If it's completely baffling to you that `reverseOld` can't accept `[]*os.File`, that's probably because you're
    thinking 'Huh? But doesn't `[]any` mean "any slice"?'. If so - you are not alone. Read the next section. If that
    behaviour already makes total sense to you, [skip ahead](/TODO).

    ## `[]any` has never meant any slice

    Even before generics, `[]interface{}` (exactly equivalent to `[]any`) did not mean "any slice".

    Values with an interface type in Go are _containers_ for concrete types, not the concrete types themselves. They're
    boxed types. Go does a lot to hide this from you for convenience, and that 'magic' also makes it really easy to write a
    lot of Go without being aware of this distinction. This is very different from how other languages handle this - e.g.
    TypeScript.

    So `[]any` in Go, before and after generics landed, means "a slice of interface boxes". Since the empty interface - `any`/`interface{}` -
    has no methods, every type fulfils it. But, as said, we need those boxes: a slice of concrete values
      like `[]int` or `[]string` looks totally different in memory and therefore can't be used with code that
      accepts `[]any`.

    This took me ages to get my head around. If this quick explanation hasn't clicked with you, I've
    written [another post](/go-interfaces-the-tricky-parts/) that explains why interfaces work like this in Go (even pre
    generics).

    ## How are generics implemented?

    We've learned type-parameters let us write a much broader set of generic functions that interfaces alone did. Now let's
    have a look into how Go compiles generic code. After that, we'll have enough to solve our puzzle.

    Go's generics can be thought of as working by doing some copy-pasting - called 'instantiating' in the spec - for you. If
    you have a function that you want to work on a set of types, it'll copy-paste one specialised function for each type,
    replacing the type parameters with specific types. Taking a function with the signature of our `one` function from the
    puzzle:

    ```go
    package main

    func one[S []E, E any](s S) {}

    func main() {
        one([]int{})
        one([]string{})
        one([]any{})
    }
    ```

    the compiler will generate us implementations of the `one` function for all the types assignable to `E`/`S` (the spec
    calls this the "type set"). In theory for `any` that's every type we include, a huge amount to compile! But in reality
    Go does this only for the subset of types that we actually pass into `one` in our program). The compiled functions will
    look a bit like this (use the [compiler explorer](https://godbolt.org/z/e63579sqM) to see the real output), and you can
    see the type parameter has been replaced with the specific types we used:

    ```go
    // compiler generates
    func compiled_one(s []int) { }
    func compiled_one(s []string) { }
    func compiled_one(s []interface{}) { }
    ```

    This should make it clear why `S` can't be considered `[]any`. Two of the compiled function implementations accept
    slices of a specific concrete type.

    So to correct our reasoning from the start of the post:

    1. `one` has the type parameter `[S []E, E any]`
    2. we know `any` here has a type-set that covers non-interface types
    3. therefore we can't pass `S` into a non-generic function accepting `[]any`. `S` is a superset of `[]any`: `[]any` only
       covers slices of interface types

    This makes sense! As said, a major motivation for generics was exactly that, writing functions that can work with all
    slices.

    ## The two flavours of interface

    Solving this mystery has taught us something important, and perhaps unfortunate: types like `any`, `interface{}`
    or `io.Reader` means something very different in generic and non-generic code:

    * in generic code, e.g. `[S []E, E any]`, `any` really means "any type", so `E` can be a concrete type in the 'instantiated' code
    * in non-generic code, e.g. `s []any`, `any` means "any interface type", and the elements of `s` will be interface values (boxed)

    Let's look at another implication of this difference: type-assertions.

    ## Type-assertions and generics

    In Go, we can use type-assertions to determine the concrete type of value of interface type at runtime. Or, at least, you can outside of
    generic code: you can probably see why. For instance:

    ```go
    package main

    import "fmt"

    type frobber interface{ frob() }

    type mytype int

    func (_ mytype) frob() {}

    var _ frobber = mytype(0)

    func normal(f frobber) {
        if iv, ok := f.(mytype); ok {
            fmt.Println("unwrapped you!", iv)
        }
    }

    func generic[F frobber](f F) {
        if iv, ok := f.(mytype); ok {
            fmt.Println("unwrapped you!", iv)
        }
    }
    ```

    If you run this you'll see `normal` compiles, but `generic` has a compile error:

    ```
    generics/frob.go:15:15: invalid operation: cannot use type assertion on type parameter value f (variable of type F constrained by interface{frob()})
    ```

    This shouldn't surprise us, because we now know that interface means something different in generic and non-generic
    code. In non-generic code, the value is always
    boxed in an interface value. In generic code it's a type-constraint, but the value may be concrete. Since we need the 'box' (interface value) to perform type-assertions, it makes sense that we can't use a
    type-assertion. This is captured in [the spec](https://go.dev/ref/spec#Type_assertions), where the spec states
    type-assertions can be used only on an expression "of interface type, but not a type parameter". But what you've
    learned also means you understand _why_ this rule is in the spec.

    ## Far from basic

    Let's add one more bit of confusion to the mix, and constrain an interface type with types, rather than just methods:

    ```go
    package main

    type intString interface {
        // the ~ means newtypes with the underlying type of int
        ~int
        fmt.Stringer
    }

    type printableInt int

    func (i printableInt) String() string {
        return fmt.Sprintf("%d", i)
    }

    func main() {
        var pi intString = 10
    }

    func withIntString(is intString) {}
    ```

    We will get compile errors in two places here, because the only place you can use interfaces that have type constraints
    is in type-parameters. So we have a flavour of interface that cannot be used anywhere but generic code.

    The spec tell us there are now two types of interface, 'basic' and 'general':

    > Interfaces that are not basic may only be used as type constraints, or as elements of other interfaces used as constraints. They cannot be the types of values or variables, or components of other, non-interface types.

    After generics, Go now has 'basic' and 'general' interface types sharing the same syntax, and, as we've seen, "basic" interfaces types
    behave completely differently in generic and non-generic code:

    |                        | Non-generic code                 | Generic code                                      |
    |------------------------|----------------------------------|---------------------------------------------------|
    | Basic interface type   | Interface value, type-assertions | Concrete and interface values, no type-assertions |
    | General interface type | Not allowed                      | Concrete and interface values, no type-assertions |


    ## Tradeoffs

    Sharing the `interface` keyword for generic and non-generic, and basic and general interfaces, is a tradeoff. It avoids
    adding new syntax, and sometimes it's intuitive: you don't need to understand the mechanics and it works
    pretty well how you'd expect. But I think I've demonstrated that this comes at some cost - the design has very literally
    confused things that behave very differently. This was pointed out by some
    [maintainers](https://github.com/golang/go/issues/43651#issuecomment-758854504) during the design
    discussions:

    > I remain concerned that this proposal overloads words (and keywords!) that formerly had very clear meanings â€” specifically the words type and interface and their corresponding keywords â€” such that they each now refer to two mostly-distinct concepts that really ought to instead have their own names

    This post isn't claiming this tradeoff was the wrong one, nor that there's an obviously better alternative. But I hope
    it does help you understand how the concept of interface has ended up overloaded, and helps you navigate the confusing
    implications.

    ## Post-scripts

    ### Tilde

    The tilde isn't important here. Tilde means "types with the underlying type of X", e.g. `~int` is "types with the underlying type of int", and allows generic code to work with new types. Adding tilde to `one` would
    us pass in types like `type MySlice []somepkg.Something`. `MySlice` is a distinct type: and that's how we can attach methods to it. But its
    _underlying_ type is `[]somepkg.Something`. Since `one` lacks a tilde in `[S []E, E any]`, we couldn't pass
    in `MySlice` because it's a distinct type, and thus not a slice type. But adding the tilde - `[S ~[]E, E any]` -
    fixes this, because `MySlice`'s underlying type is a slice:

    ```go
    type MySlice []somepkg.Something

    func one[S []E, E any](s S) {}
    func oneTilde[S ~[]E, E any](s S) {}

    // Cannot use 'MySlice{}' (type MySlice) as the type S
    one(MySlice{})
    // fine
    oneTilde(MySlice{})
    ```

    So in practice when using generics we'll almost always want the tilde.

    ### Formal

    Some readers might feel like I'm missing some formal language from type-theory or programming language design. I've
    avoided that as it's another layer of concepts for someone to learn if they lack them. I think you'll agree, there's
    plenty to learn already.

    Another reason: names are _labels_ not an _explanations_. They tell us
    what something is, but not why it works that way. Often, when you've learned them at the same time as learning
    how the things named work they bring to mind the explanation. But if you don't already have the explanation, they're just
    another thing to learn. I think it's much more important to understand the mechanics than
    the labels - a bit like Richard Feynman's distinction between [knowing the names of birds, and useful knowledge about those birds](https://fs.blog/richard-feynman-knowing-something/).




