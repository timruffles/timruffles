draft: true
body: |
  Application development tools really like boxes. A well structured app is a box with some boxes inside, and inside those boxes live some other boxes.

  Those boxes are components and they jealously guard their state. It's great! That way we don't have to worry about all the - probably insidiuous - ways they could interact and mess with each other.

  However, recently I worked with a team where we felt that we needed to escape from box world. 

  ## Your app as a canvas

  A few years back I joined a really taleneted team of people, who were building a data-visualisation tool. It went well, and one Friday we decided to try to prototype what a dream data-visualisation framework would look like if we didn't have to squeeze it into a world of boxes.

  We thought it'd be cool if data could flow from one visualisation to another. That if you 'drilled down' into a datapoint, that'd be represented as zooming straight into the data point. That the loading spinner would flow into a visualisation once the data arrived.

  All of this was insanity when viewed from the perspective of the hierarhical tree structure of box world.

  We didn't do anything with the idea for a long time, and then it became time to build v2.

  ## Escape from box world

  How would you architect an application to allow components to collaborate with visual elements? The way we decided on was to split the app into two layers, the 'app' layer and the 'canvas':

  In this architecture, the canvas layer would have no rules at all. Visual elements could fly to any point on the screen, could scale, rotate etc. A designer's dream!

  However, we didn't want to lose the sanity and productivity of box world. So we simply layered a box-world on top of the canvas. Visual components would get their 'suggested' bounding box from box-world, but from that point could do whatever they liked!

  ## Nitty gritty

  This approach could be generalised with any mixture of technologies, where one layer is declarative, hierarchical and restrictive, and another is imperative and non-hierarchical. To be concrete, however, here's how we did it:

  ~~~
  React + Redux + HTML/CSS - provided the declarative app layer, and controlled layout of the boxes
  Mark store - provided an abstraction layer capturing the position of 'marks'
  Renderers - rendered the marks onto SVG or Canvas
  ~~~

  We'd previously hit the limits of SVG as a renderer, so wanted to abstract out the final renderering layer for our visualisations.

  The mark store thus captured the color, size, shape and motion vectors of each visual element.

  ## Sane handover

  Having the mark store allowed us to control the complexity of having the various visualisations interact with each other

  ## Caveats

  As a tiny team (for long periods myself and one of the founders were the only developers) we did find the burdeon of building the application and rolling a new type of framework a challenge! Eventually we decided to simplify the mark store/rendering layer by simply sticking with the DOM only. We got most of the functionality of the mark store for free, and using a class-based tagging system could efficiently recreate the system of ownership tagging we had implemented in memory.

  Secondly - to get this stuff working fluidly is a challenge. We didn't fully capture the power that we feel the framework had before I left. However, I do think we created a framework that'll enable visually novel designs to be supported by a platform. I hope Cubik will show that we can choose to force our tools to do what we want to do, rather than feeling we have to do what's easy.

  
  

