draft: true
body: |

  Functional programming outside full FP languages like Haskell and OCaml should make considered use of objects. Not `{name: 'amy'}` objects, but full-blown, Alan Kay, 'behaviour and state' objects.

  Why?

  Let's agree some definitions. Here I'm using FP to mean a certain set of principles:

  - modelling without the use of mutable data-structures in business logic (i.e normal app code)
  - no reassignment of local, or especially shared, variables in business logic

  In both non-FP languages where I've seen attempts to write 'functional' application code - JS and Go - attempts to avoid violating these rules leads to code that's very hard to read, maintain, and modify.


  Some obvious example of object-oriented code that violates these principles are:

  ~~~
  let user = {};
  User.authenticate((err, userFromApi) => {
      if(err) {
        // ...
      } else {
        user = userFromApi;
        userView.render();
      }
  })
  ~~~

  Why? Here we're using a shared 'user' variable to model the state.
  
  Equally, we could not use a user 'model' and have it load its own state, as that'd be using mutable datastructures in our business logic:

  ~~~
  class User {
    load() {
      User.authenticate((err, userFromApi) => {
          if(err) {
            // ...
          } else {
            this.set(userFromApi)
          }
      })
    }
  }
  ~~~

  However: outside of languages with compilers that do a lot of clever rewrit



  Okay - why does this force us to use objects?

  Well: let's agree that regardless of how we push state around, all programs will need state. FP simply shoves it out into the cold borders of our program, rather than woven throughout it.

  What kind of state? Not the 'accidental state' that is used by so much OO/producural code, but essential state. Here are some examples of essential state:

  - a database connection
  - the result of a sub-process execution
  - a network response
  - the result of attempting to open a file
  - user input

  Accidental state is simply a side-effect of a certain coding style, things like:

  - state flags like "done loading"
  - using a mutable object to "build up" a result

  ## Handling essential state without objects

  There is one way to handle essential state completely without objects, but it's dreadful: continuation passing. That is, setting up a long chain of callbacks that pass the current essential state around as the program continues.

  ## Redux

  Where are we forced to use objects in Redux? The store. This is our single global store for essential state. We have principled rules around updating the state, but nevertheless we can't do without it.

  It's immutable, but it's certainly an Kay-object: `store.dispatch()`, `store.getState()`. `store.dispatch({ type: "Load" })` and `store.load()` is a minor difference, and you could implement Redux perfectly well with the action-creators living on the store.

  ## Promises

  Promises are a classic Kay-object: a bundle of state (resolution or rejection state) and methods on that state `.then()`.

  ## RxJS

  Streams are again classic Kay-objects.

  ## So what?

  The takeaway here is without


