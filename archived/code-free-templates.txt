title: Code free templates are great
date: "25/04/2012"
body: |
  I use templates to render views, normally Mustache as it's clean, promotes testable code and is designer friendly (no complex code to break).  If you use templates your views end up primarily assuming the task of the Controller in the traditional Model-View-Controller (MVC) pattern - passing events from the view to model, and binding data from the model to the view. Without templates you'll be doing more of the display work yourself, manually generating the code rather than handing the data to the template declaratively (also true if you're using canvas or SVG).

  ### Why I prefer templating over DOM APIs

  I recommend using templates as they're efficient in development time (and performant: in all but the most recent browsers, `el.innerHTML = templatedString` is faster than DOM manipulation). Use whichever makes sense in your circumstances. I'll focus on templated views in this tutorial, but there's not much difference.

  I'd advise placing templates in the DOM  - it's really hard to test, and tends to make maintaince a bit of a faff (20 templates in one file?). It's a workaround for Javascript's lack of a heredoc syntax, leaving you strings over one line or lots of kludgy `/` at the end of lines. I'd personally solve this instead by switching to Coffeescript, or using a module loader like [require.js](http://requirejs.org/).
  
  ## Mustache with Backbone
  
  ### Why you should keep code out of templates
  
  The great benefit of Mustache is its forcing you to move formatting and manipulation out of the template into helpers. Helpers are lovely [verbs]() - they `format`, `humanize`, `capitalize` and so on, and functions that take one thing and return another are very easy to test. Templates aren't - they're effectively very complicated function that do a lot of different things.
  
  To compare:
    
  <pre>
    <% if(collection.length == 0) { %>
      <% collection.forEach(function(item,index) { %>
        <li class="item <%= item.get("quantity") > 1 ? "plural" : "" %><%= index % 2 == 0 ? "even" : "" %>">
          <span class="name"><%= item.get("name") %></span>
          <span class="quantity"><%= item.get("quantity") %></span>
          <span class="value"><%= "Â£" + (item.get("value") * item.get("quantity")).toFixed(2) %></span>
        </li>
      <% }); %>
    <% } else { %>
      Nothing here yet - buy some lovely stuff.
    <% } %>
  </pre>
  
  There is a lot of code here to go wrong, and lots of scope for hacky one-liners (like the currency formatting).
  
  In comparison, the Mustache template is nice and simple - all the designers I've worked with have much prefered them to noisy and easy-to-break templates.
  
  <pre>
    {{#items}}
      <li class="item {{classes}}">
        <span class="name">{{name}}</span>
        <span class="quantity">{{quantity}}</span>
        <span class="value">{{value}}</span>
      </li>
    {{/items}}
    {{^items}}
      Nothing here yet - buy some lovely stuff.
    {{/items}}
  </pre>
  
  In each of my templated views I have a `transform` function, which transforms the models/collections held by the view into data ready for the template. They're very easy to test, making use of helper functions wherever possible to standardise formatters.
  
  <pre>
    transform: function() {
      return {
        items: this.collection.map(function(item,index){
          var classes = [];
          if(item.get('quantity') > 1) classes.push("plural");
          if(index % 2 == 0) classes.push("even");
          return _.extend(item.toJSON(),{
            value: currency.formatted(item.get(value),"GBP")
            classes: classes.join(" ")
          });
        })
      };
    }
  </pre>
  
  We can easily and efficient test transform functions. The DOM is orders of magnitude slower than the above transform function, which will run extremely fast. Testing the logic of your transformation step outside the view is simple.
  
  You can probably already guess the corresponding `render` implementation:
    
  <pre>
    render: function() {
      this.el.innerHTML = this.templater(this.template,this.transform());
    }
  </pre>
  